<launch> 
    <!-- COMPLETE ARGUMENT LIST -->
    <!-- Arguments for Delta filter -->
    <arg name="topic_publish" value="/delta/pose" />
    <arg name="topic_pose_imu" value="/posePub_merged" />
    <arg name="topic_pose_cam" value="/camera/pose" />
    <arg name="topic_pose_imu_cam" value=/camera/poseAndImu" />
    <arg name="frame_id_imu" value="imu_frame" />
    <arg name="frame_id_cam" value="camera_frame" />
    <arg name="imu_rate" value="125" /> <!-- in Hz -->
    <arg name="cam_rate" value="200" /> <!-- in Hz -->
    <arg name="sphere_radius" value="0.145" /> <!-- in m -->
    <arg name="debug_topics" value="true" /> 

    <!-- Arguments for the vizualiser node: pose to lidar -->
    <arg name="topic_listen" value="/delta/pose" />
    <arg name="global_frame" value="map" />
    <arg name="pose_frame" value="odom" />
    <arg name="lidar_frame" value="pandar_frame" />

    <arg name="pcap_file"  default=""/>
    <arg name="server_ip" default="192.168.1.201"/>
    <arg name="lidar_recv_port"  default="2368"/>
    <arg name="gps_port"  default="10110"/>
    <arg name="start_angle"  default="0"/>
    <!--“lidar_type” represents the model of the lidar-->
    <arg name="lidar_type" default="PandarXT-32"/>
    <!--"frame_id" represents the id of the point cloud data published to ROS-->
    <arg name="frame_id" default="pandar_frame"/>
    <arg name="pcldata_type" default="1"/>
    <arg name="publish_type" default="points"/>
    <arg name="timestamp_type" default="realtime"/>
    <arg name="data_type" default=""/>
    <arg name="namespace" default="hesai"/>
    <arg name="lidar_correction_file"  default="$(find hesai_lidar)/config/PandarXT-32.csv"/>
    <arg name="multicast_ip"  default=""/>
    <arg name="coordinate_correction_flag"  default="false"/>
    <arg name="manager" default="pandar_nodelet_manager" />
    <arg name="fixed_frame"  default=""/>
    <arg name="target_frame"  default=""/>

    <!-- Convert arguments to rosparam server -->
    <param name="topic_publish" type="string" value="$(arg topic_publish)" />
    <param name="topic_pose_imu" type="string" value="$(arg topic_pose_imu)" />
    <param name="topic_pose_cam" type="string" value="$(arg topic_pose_cam)" />
    <param name="topic_pose_imu_cam" type="string" value="$(arg topic_pose_cam)" />
    <param name="frame_id_imu" type="string" value="$(arg frame_id_imu)" />
    <param name="frame_id_cam" type="string" value="$(arg frame_id_cam)" />
    <param name="imu_rate" type="int" value="$(arg imu_rate)" />
    <param name="cam_rate" type="int" value="$(arg cam_rate)" />
    <param name="sphere_radius" type="double" value="$(arg sphere_radius)" /> 
    <param name="debug_topics" type="bool" value="$(arg debug_topics)"/> 

    <!-- Convert arguments to rosparam server -->
    <param name="topic_listen" type="string" value="$(arg topic_listen)" />
    <param name="global_frame" type="string" value="$(arg global_frame)" />
    <param name="pose_frame" type="string" value="$(arg pose_frame)" />
   
    <!-- start LIDAR HESAI nodelet manager -->
    <!-- <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager" /> -->
    <node pkg="nodelet" type="nodelet" name="$(arg manager)" ns="$(arg namespace)" args="manager" output="screen" />
    <node pkg="nodelet" type="nodelet" name="$(arg manager)_cloud" ns="$(arg namespace)" args="load pandar_pointcloud/CloudNodelet $(arg manager)" output="screen">
        <param name="pcap_file" type="string" value="$(arg pcap_file)"/>
        <param name="server_ip" type="string" value="$(arg server_ip)"/>
        <param name="lidar_recv_port"  type="int" value="$(arg lidar_recv_port)"/>
        <param name="gps_port"  type="int" value="$(arg gps_port)"/>
        <param name="start_angle"  type="double" value="$(arg start_angle)"/>
        <param name="lidar_type"  type="string" value="$(arg lidar_type)"/>
        <param name="frame_id"  type="string" value="$(arg frame_id)"/>
        <param name="pcldata_type"  type="int" value="$(arg pcldata_type)"/>
        <param name="publish_type"  type="string" value="$(arg publish_type)"/>
        <param name="timestamp_type"  type="string" value="$(arg timestamp_type)"/>
        <param name="data_type"  type="string" value="$(arg data_type)"/>
        <param name="lidar_correction_file"  type="string" value="$(arg lidar_correction_file)"/>
        <param name="multicast_ip"  type="string" value="$(arg multicast_ip)"/>
        <param name="coordinate_correction_flag"  type="bool" value="$(arg coordinate_correction_flag)"/>
        <param name="fixed_frame"  type="string" value="$(arg fixed_frame)"/>
        <param name="target_frame"  type="string" value="$(arg target_frame)"/>
    </node>

    <!-- SETUP TF TREE: Order of transforms: x y z rz ry rx, intrinsic rotation order: rx first, new ry second, new rz third -->
    
    <!-- Defines the transform between CAM and IMU coordinate system axes, e.g.: IMU x axis == CAM z axis -->
    <node pkg="tf" type="static_transform_publisher" name="left_cam_2_right_imu_stfb" args="0 0 0 1.570796 0 3.141592 axes_cam axes_imu 100" />
    <!-- Defines the transform between CAM and IMU coordinate systems in the global map frame, e.g.: IMU moves in x, CAM in y -->
    <node pkg="tf" type="static_transform_publisher" name="extr_imu_2_cam_stfb" args="0 0 0 -1.570796 0 0 $(arg frame_id_imu) $(arg frame_id_cam) 200" />
    <node pkg="tf" type="static_transform_publisher" name="lidar_2_odom_stfb" args="0 0 0 3.141592 0 0 $(arg pose_frame) $(arg lidar_frame) 100" />
    <node pkg="tf" type="static_transform_publisher" name="odom_is_imu_frame_stfb" args="0 0 0 0 0 0 $(arg pose_frame) imu_frame 200" />

    <!-- POSE ESTIMTATION nodes -->    
    <node pkg="imuJasper" type="imuJasper" name="imu_jasper_odometry_node" args="-q -rate 125 -imuRate 250 -autogain 0.2 -z0" output="screen" />

    <node pkg="realsense_pipeline_fix" type="auto_reconnect" name="realsense_pose_node" output="screen" />

    <node pkg="delta_pose_filter" type="filter_node" name="delta_pose_filter_node" output="screen" />

    <node pkg="delta_pose_filter" type="vizualizer" name="delta_tf_lidar_pub" output="screen" />

</launch>
